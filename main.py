import openai
import os
import requests
import pandas as pd
from bs4 import BeautifulSoup


# Load environment variables


# Configure OpenAI API key
openai.api_key = "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"
print(f"Retrieved API Key: {openai.api_key}")  # This should display the actual key
class ExploitDatabaseGPT:
    def __init__(self):
        self.base_url = "https://www.exploit-db.com"
        self.search_url = f"{self.base_url}/search"
        
    def search_exploits(self, query):
        try:
            # Search parameters
            params = {
                "q": query,
                "type": "text"
            }
            
            response = requests.get(self.search_url, params=params)
            if response.status_code == 200:
                soup = BeautifulSoup(response.text, 'html.parser')
                results = []
                
                # Find exploit entries
                for entry in soup.find_all('tr')[1:]:  # Skip header row
                    columns = entry.find_all('td')
                    if len(columns) >= 5:
                        exploit = {
                            'date': columns[0].text.strip(),
                            'title': columns[1].text.strip(),
                            'type': columns[2].text.strip(),
                            'platform': columns[3].text.strip(),
                            'link': self.base_url + columns[1].find('a')['href'] if columns[1].find('a') else None
                        }
                        results.append(exploit)
                
                return results
            else:
                return f"Error: Unable to fetch results. Status code: {response.status_code}"
                
        except Exception as e:
            return f"Error searching exploits: {str(e)}"

    def get_exploit_details(self, exploit_url):
        try:
            response = requests.get(exploit_url)
            if response.status_code == 200:
                soup = BeautifulSoup(response.text, 'html.parser')
                
                # Extract exploit code
                code_section = soup.find('div', class_='code-wrapper')
                if code_section:
                    return code_section.text.strip()
                return "No exploit code found."
            
            return f"Error: Unable to fetch exploit details. Status code: {response.status_code}"
            
        except Exception as e:
            return f"Error getting exploit details: {str(e)}"

def chat_with_gpt(prompt, model="gpt-3.5-turbo", system_message="You are a security research assistant."):
    try:
        messages = [
            {"role": "system", "content": system_message},
            {"role": "user", "content": prompt}
        ]
        
        response = openai.ChatCompletion.create(
            model=model,
            messages=messages
        )
        
        return response.choices[0].message.content
    
    except Exception as e:
        return f"An error occurred: {str(e)}"

def main():
    exploit_db = ExploitDatabaseGPT()
    
    print("Welcome to Security Research Assistant! (Type 'quit' to exit)")
    print("Commands:")
    print("- 'search <query>': Search for exploits")
    print("- 'details <url>': Get exploit details")
    print("- 'analyze <url>': Get AI analysis of an exploit")
    print("-" * 50)
    
    while True:
        user_input = input("\nYou: ").strip()
        
        if user_input.lower() == 'quit':
            print("\nGoodbye!")
            break
            
        if user_input.lower().startswith('search '):
            query = user_input[7:]  
            results = exploit_db.search_exploits(query)
            
            if isinstance(results, list):
                print("\nFound exploits:")
                for i, exploit in enumerate(results[:5], 1):  
                    print(f"\n{i}. {exploit['title']}")
                    print(f"   Date: {exploit['date']}")
                    print(f"   Type: {exploit['type']}")
                    print(f"   Platform: {exploit['platform']}")
                    print(f"   Link: {exploit['link']}")
            else:
                print("\nError:", results)
                
        elif user_input.lower().startswith('details '):
            url = user_input[8:]  # Remove 'details ' from the input
            details = exploit_db.get_exploit_details(url)
            print("\nExploit Details:")
            print(details)
            
        elif user_input.lower().startswith('analyze '):
            url = user_input[8:]  # Remove 'analyze ' from the input
            details = exploit_db.get_exploit_details(url)
            
            analysis_prompt = f"""
            Please analyze this exploit code and provide:
            1. A brief description of what it does
            2. The potential impact
            3. Affected systems/versions
            4. Possible mitigations
            
            Exploit code:
            {details}
            """
            
            analysis = chat_with_gpt(analysis_prompt)
            print("\nAI Analysis:")
            print(analysis)
            
        else:
            
            response = chat_with_gpt(user_input)
            print("\nAssistant:", response)

if __name__ == "__main__":
    main()